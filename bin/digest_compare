#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require_relative "../lib/app"

kubernetes = App::Kubernetes::Client.new(host: "127.0.0.1:8001", scheme: :http)

def fetch(image, parent:)
  Async do
    {
      image: image.target,
      our_digest: parent.async { App::Docker::Registry.published_digest(image) }
      # skopeo_digest: parent.async { `skopeo inspect docker://#{image.target} | jq -r .Digest`.strip }
    }.transform_values do |value|
      next value unless value.respond_to?(:wait)

      value.wait
    end
  end
end

Sync do
  throttler = Async::Throttler.new(1, 10)

  kubernetes.core_v1_api
            .list_core_v1_pod_for_all_namespaces
            .items
            .flat_map { _1.status.container_statuses }
            .map { App::PodImage.new(target: _1.image, deployed: _1.image_id) }
            .uniq(&:target)
            .filter_map { fetch(_1, parent: throttler) if App::Docker::Registry.supported?(_1) }
            .each do |info|
    info = info.wait
    # return puts("ERROR: #{info}") unless info[:our_digest] == info[:skopeo_digest]

    puts("OK: #{info}")
  rescue Async::TimeoutError
    puts("Timeout!")
  end
end
